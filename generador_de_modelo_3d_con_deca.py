# -*- coding: utf-8 -*-
"""Generador de Modelo 3D con DECA

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qt74x0F10T3aUdRLz0AGSz6_b_O1sROT
"""

import subprocess
import os

def generar_modelo_3d_deca(ruta_imagen_entrada, directorio_salida):
    """
    Ejecuta el script de reconstrucci√≥n de DECA para generar un modelo 3D
    con archivos .obj, .mtl y de textura a partir de una imagen.

    Args:
        ruta_imagen_entrada (str): La ruta completa a la imagen 2D de entrada.
        directorio_salida (str): El directorio donde DECA guardar√° los resultados.
                                 Nota: DECA crear√° una subcarpeta dentro de este.
    """

    # ‚ö†Ô∏è Validar si la imagen de entrada existe.
    if not os.path.exists(ruta_imagen_entrada):
        print(f"Error: La imagen de entrada no se encontr√≥ en la ruta: {ruta_imagen_entrada}")
        return

    # ‚ö†Ô∏è Crear el directorio de salida si no existe.
    if not os.path.exists(directorio_salida):
        print(f"Creando el directorio de salida: {directorio_salida}")
        os.makedirs(directorio_salida)

    # üöÄ Construir el comando para el script de DECA.
    # Los flags --saveObj, --saveTexture son cruciales para generar los archivos auxiliares.
    comando_deca = [
        'python',
        'demos/demo_reconstruct.py',
        '-i', ruta_imagen_entrada,  # Ruta de la imagen de entrada.
        '-s', directorio_salida,    # Directorio para guardar los resultados.
        '--saveObj',                # Habilitar la generaci√≥n del archivo .obj.
        '--saveTexture',            # Habilitar la generaci√≥n de la textura (imagen .png).
        '--saveDepth',              # Habilitar la generaci√≥n del mapa de profundidad.
        '--rasterizer_type', 'pytorch3d' # Usar el rasterizador de PyTorch.
    ]

    print(f"Iniciando la reconstrucci√≥n 3D con DECA para la imagen: {ruta_imagen_entrada}")
    print("Este proceso puede tardar varios minutos dependiendo de tu hardware.")

    # üíª Ejecutar el comando en la terminal.
    try:
        subprocess.run(comando_deca, check=True, cwd=os.getcwd())
        print("\nüéâ ¬°Proceso completado con √©xito! üéâ")
        print(f"Los archivos de salida (.obj, .mtl, .png) se encuentran en una subcarpeta")
        print(f"dentro de: {directorio_salida}")
    except FileNotFoundError:
        print("\n‚ùå Error: No se pudo encontrar el comando 'python' o el script 'demo_reconstruct.py'.")
        print("Aseg√∫rate de estar en el directorio correcto del proyecto DECA y que tu entorno est√° configurado.")
    except subprocess.CalledProcessError as e:
        print(f"\n‚ùå Error durante la ejecuci√≥n de DECA: {e}")
        print("Revisa la salida anterior para m√°s detalles del error.")

# --- ‚öôÔ∏è Ejemplo de Uso ---
# 1Ô∏è‚É£ Reemplaza 'mi_imagen.png' con la ruta a tu propia imagen.
# 2Ô∏è‚É£ Aseg√∫rate de que la imagen exista en el directorio de trabajo o proporciona la ruta completa.
ruta_de_mi_imagen = 'TestSamples/examples/brad_pitt.jpg' # Ejemplo con una imagen del repositorio de DECA.
# ruta_de_mi_imagen = 'path/to/tu_imagen.jpg' # Descomenta y usa tu propia ruta.
output_directorio = 'mi_output_deca'

generar_modelo_3d_deca(ruta_de_mi_imagen, output_directorio)